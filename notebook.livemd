# Coding interview questions solved in Elixir

## Introduction

I think whiteboard coding interviews are unpredictive hazing rituals and I don't use them when
hiring or assessing candidates. For the most part, I'll decline a job interview rather than
subject myself to them. But I thought it might be instructive to solve some of the questions
typically used in these interviews using (hopefully) idiomatic Elixir.

I'm mainly planning on covering the problems that I've actually been asked in interviews,
back when I was unable to avoid interviews that involved coding challenges, although
there are some commonly used ones that require certain types of mutability that would have to
be modeled with processes that I'll probably not get to for a while.

If nothing else, it'll exercise some muscles, force me to explore some of the standard libraries
in Elixir, and I can refer back to them when I encounter a random day-to-day problem that
maps to one of those types of problems.

```elixir
# Let's make sure some handy Elixir tools are handy
Mix.install([
  {:vega_lite, "~> 0.1.3"},
  {:kino, "~> 0.5.0"}
])

ExUnit.start()
```

## Sliding Window Problem

Given a list numeric values, find the arithmetic mean (or, perhaps, max or min) of each contiguous list
of K consecutive elements.

From "Cracking the Coding Interview" (I'm told):

With a list of `[1, 3, 2, 6, -1, 4, 1, 8, 2]` where `K=5`, you should get
`[2.2, 2.8, 2.4, 3.6, 2.8]` as the result.

```elixir
defmodule Sublists do
  def mean_of_sublists(list, k), do: sublist_aggregation(list, k, &(Enum.sum(&1) / k))
  def max_of_sublists(list, k), do: sublist_aggregation(list, k, &Enum.max(&1))
  def min_of_sublists(list, k), do: sublist_aggregation(list, k, &Enum.min(&1))

  defp sublist_aggregation(list, k, aggregation_fun) do
    list
    |> Enum.chunk_every(k, 1, :discard)
    |> Enum.map(aggregation_fun)
  end
end
```

```elixir
# Let's test that module
defmodule AssertionTest do
  use ExUnit.Case, async: true
  import Sublists

  # 4) Use the "test" macro instead of "def" for clarity.
  test "mean_of_sublists [1, 3, 2, 6, -1, 4, 1, 8, 2] where K=5" do
    assert [2.2, 2.8, 2.4, 3.6, 2.8] = mean_of_sublists([1, 3, 2, 6, -1, 4, 1, 8, 2], 5)
  end

  test "mean_of_sublists [1, 2, 3, 4, 5, 6], 3" do
    assert [2.0, 3.0, 4.0, 5.0] = mean_of_sublists([1, 2, 3, 4, 5, 6], 3)
  end

  test "max_of_sublists [1, 3, 2, 6, -1, 4, 1, 8, 2], 5" do
    assert [6, 6, 6, 8, 8] = max_of_sublists([1, 3, 2, 6, -1, 4, 1, 8, 2], 5)
  end

  test "max_of_sublists [1, 2, 3, 4, 5, 6], 3" do
    assert [3, 4, 5, 6] = max_of_sublists([1, 2, 3, 4, 5, 6], 3)
  end

  test "min_of_sublists [1, 3, 2, 6, -1, 4, 1, 8, 2], 5" do
    assert [-1, -1, -1, -1, -1] = min_of_sublists([1, 3, 2, 6, -1, 4, 1, 8, 2], 5)
  end

  test "min_of_sublists [1, 2, 3, 4, 5, 6], 3" do
    assert [1, 2, 3, 4] = min_of_sublists([1, 2, 3, 4, 5, 6], 3)
  end
end

ExUnit.run()
```

## N Choose K (Enumerate all subsets of N elements)

In one programming interview, I was asked "Given a set of N elements, how would
you enumerate all elements of that subset.

This has a simple, elegant solution if you happen to be in the right frame
of mind for it; you can use a bitvector where the Nth bit represents the
Nth element, and count from 0 (if you want the null set) or 1 (if you don't)
to 2^N - 1. Then for each iteration, you yield the list back that corresponds
to the set bits.

If you don't happen to know this trick, you'll probably awkwardly try to
write a bunch of nested for loops and quickly hit a wall before you realize
you're painting yourself into a corner. If you know "the trick" it's a simple
problem, other than perhaps some fiddly details with bitwise operations that
are easy to get wrong under the pressure of an interview.

However, in Elixir, the standard lists are linked lists.
Random access to a linked list is not terribly efficient. What to do?
Well, recursion comes to the rescue.

There's still a merge operation on each non-terminal iteration, so it's not perfect,
but it'll get the job done. It could perhaps be eliminated by using Stream.unfold and
some more complex conditional logic.

```elixir
defmodule Combinatorics do
  def combinations(_, 0), do: [[]]
  def combinations([], _), do: []

  def combinations([h | rest], k) do
    for(l <- combinations(rest, k - 1), do: [h | l]) ++ combinations(rest, k)
  end

  def combinations(list) do
    0..Enum.count(list)
    |> Enum.flat_map(fn k -> combinations(list, k) end)
  end
end

Combinatorics.combinations(1..5 |> Enum.to_list())
```

## Find the (intersection|union|difference|disjunction ) between two lists

### Problem Variant 1:

Given two lists of N elements, find the elements that both have in common (intersection)

### Problem Variant 2:

Given two lists of N elements, find the elements that are only present in the left side of the list (difference)

### Problem Variants 3 and 4:

The same as above, but the lists are conveniently pre-sorted

### Problem variant 5:

Find the union of the items in the list (pre-sorted)

### Problem variant 6:

Find the union of the items in the list (pre-sorted)

### Problem variant 7

Find the items that are only present in one side of the list (disjunction)

Many interviewers, especially the ones that ask variants 3 and 4, basically want to see you
tediously enumerate over two lists and catch yourself making silly mistakes, since iterating over two
lists simultaneously generally eliminates the option of using `foreach` type language constructs.

But I'm lazy, and in real life I would pretty much always be inclined to solve this type of problem
by converting the elements to sets. So when asked this question, I start out by doing that, and
watch how the interviewer reacts.

```elixir
list_1 = [1, 2, 3, 4, 5, 6, 7]
list_2 = [1, 4, 6, 7, 8, 9, 12]

set_1 = MapSet.new(list_1)
set_2 = MapSet.new(list_2)

intersection = MapSet.intersection(set_1, set_2)
difference = MapSet.difference(set_1, set_2)
union = MapSet.union(set_1, set_2)
disjunction = MapSet.difference(union, intersection)

%{
  intersection: intersection,
  difference: difference,
  union: union,
  disjunction: disjunction
}
```

If the interviewer seems displeased by that and says "we want to make sure you can *really* implement this by
hand," I recommend walking out of the interview and humbly asking them not to waste your time any further.
Because if you happen to know what a Set data structure is called, you can go and look up efficient implementations in
the event you ever need to do it by hand. And if you have a Map data structure,
but not a Set abstraction, you can easily implement a set in terms of Maps (as
Elixir does under the covers).

You're a professional. We give concepts names for a reason. And that
reason is so that you don't spend half your day at work solving well-solved problems from first-principles when
you can crack open a book or look something up online.

However, perhaps they have better interview-side manner, and they want you to do an iterative solution without
built-in maps/hashes/sets because they really like for loops, and they seem like fun people. They give you
a freebie and say "assume the two lists are sorted and there are no duplicates within the individual lists."

You can do this in for loops, but personally I find all the conditionals I'd have to write difficult
to keep in my head all at once. And at least in Elixir, writing recursive functions with pattern matching
tends to feel a little more natural. So I'd eventually converge to something like this:

```elixir
defmodule SortedListTricks do
  def intersection(list_1, list_2) do
    intersection_matcher([], list_1, list_2)
    |> Enum.reverse()
  end

  def difference(list_1, list_2) do
    difference_matcher([], list_1, list_2)
    |> Enum.reverse()
  end

  def union(list_1, list_2) do
    union_matcher([], list_1, list_2)
    |> Enum.reverse()
  end

  def disjunction(list_1, list_2) do
    union(list_1, list_2)
    |> difference(intersection(list_1, list_2))
  end

  defp intersection_matcher(acc, [], []), do: acc
  defp intersection_matcher(acc, [_ | _], []), do: acc
  defp intersection_matcher(acc, [], [_ | _]), do: acc

  defp intersection_matcher(acc, [hd_1 | rest_1] = list_1, [hd_2 | rest_2] = list_2) do
    cond do
      hd_1 < hd_2 -> intersection_matcher(acc, rest_1, list_2)
      hd_1 > hd_2 -> intersection_matcher(acc, list_1, rest_2)
      # The only time we need to add elements is when we find a match. Otherwise we just
      # cruise along until we find some elements that match.
      hd_1 == hd_2 -> intersection_matcher([hd_1 | acc], rest_1, rest_2)
    end
  end

  defp difference_matcher(acc, [], []), do: acc
  # the "extras" on the left side need to be added to the difference
  defp difference_matcher(acc, [head | rest], []), do: difference_matcher([head | acc], rest, [])
  # we don't care about the "extras" on the right-side list
  defp difference_matcher(acc, [], [_ | _rest]), do: difference_matcher(acc, [], [])

  defp difference_matcher(acc, [hd_1 | rest_1], [hd_2 | rest_2] = list_2) do
    cond do
      # if we're less than what's on the right side, definitely don't exist on the right side
      hd_1 < hd_2 -> difference_matcher([hd_1 | acc], rest_1, list_2)
      # if we're more than what's on the right side, we need to catch up
      hd_1 > hd_2 -> difference_matcher(acc, rest_1, list_2)
      # if we're equal to the right side, we exist in both so we can skip
      hd_1 == hd_2 -> difference_matcher(acc, rest_1, rest_2)
    end
  end

  defp union_matcher(acc, [], []), do: acc
  defp union_matcher(acc, [head | rest], []), do: union_matcher([head | acc], rest, [])
  defp union_matcher(acc, [], [head | rest]), do: union_matcher([head | acc], rest, [])

  defp union_matcher(acc, [hd_1 | rest_1] = list_1, [hd_2 | rest_2] = list_2) do
    cond do
      # if we're less than the element on the right side, then we're "unique"
      hd_1 < hd_2 -> union_matcher([hd_1 | acc], rest_1, list_2)
      # if we're greater than the element on the right side, we need to catch up before adding elements
      hd_1 > hd_2 -> union_matcher(acc, list_1, rest_2)
      # When we're equal, we skip to the next element on both lists
      hd_1 == hd_2 -> union_matcher([hd_1 | acc], rest_1, rest_2)
    end
  end
end

%{
  intersection: SortedListTricks.intersection(list_1, list_2),
  difference: SortedListTricks.difference(list_1, list_2),
  union: SortedListTricks.union(list_1, list_2),
  disjunction: SortedListTricks.disjunction(list_1, list_2)
}
```

Now you have some lovely throwaway code that you probably won't ever actually use, but it handles
most of your happy-path cases and probably only has a couple of bugs. I had it "working" with the
sample data before realizing the original version of the line that now goes:

<!-- livebook:{"force_markdown":true} -->

```elixir
# if we're greater than the element on the right side, we need to catch up before adding elements
      hd_1 > hd_2 -> union_matcher(acc, list_1, rest_2)
      
```

Would completely miss things on the left side under certain circumstance because I originally wrote it
as (acc, rest_1, rest_2). (It worked for my sample input!)
